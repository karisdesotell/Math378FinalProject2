[
  {
    "objectID": "penguins_model.html",
    "href": "penguins_model.html",
    "title": "Classification Model",
    "section": "",
    "text": "Here we’ll create a classification model that predicts the species of a penguin based on its other attributes."
  },
  {
    "objectID": "penguins_model.html#prepare-the-data",
    "href": "penguins_model.html#prepare-the-data",
    "title": "Classification Model",
    "section": "Prepare the Data",
    "text": "Prepare the Data\nFirst, load the necessary libraries:\n\nlibrary(tidymodels)\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nNext, we examine the penguin data and preparing it for modeling.\n\ndata(penguins)\npenguins &lt;- drop_na(penguins)\nglimpse(penguins)\n\nRows: 333\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, 36.7, 39.3, 38.9, 39.2, 41.1, 38.6…\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, 19.3, 20.6, 17.8, 19.6, 17.6, 21.2…\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, 193, 190, 181, 195, 182, 191, 198, 18…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, 3450, 3650, 3625, 4675, 3200, 3800…\n$ sex               &lt;fct&gt; male, female, female, female, male, female, male, fe…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nWe split the data into training and testing sets.\n\nset.seed(123)\npenguin_split &lt;- initial_split(penguins, prop = 0.75, strata = species)\npenguin_train &lt;- training(penguin_split)\npenguin_test &lt;- testing(penguin_split)"
  },
  {
    "objectID": "penguins_model.html#define-the-model",
    "href": "penguins_model.html#define-the-model",
    "title": "Classification Model",
    "section": "Define the Model",
    "text": "Define the Model\nWe use a multinomial logistic regression model for this multi-class classification problem, utilizing the tidymodels framework.\n\nmultinom_spec &lt;- multinom_reg() %&gt;% \n  set_engine(\"nnet\") %&gt;% \n  set_mode(\"classification\") %&gt;%\n  set_args(trace = FALSE) \n\nThe recipe specifies how the model variables should be processed, including dummy encoding for categorical variables and normalization for numeric variables.\n\npenguin_recipe &lt;- recipe(species ~ ., data = penguin_train) %&gt;%\n  step_dummy(all_nominal(), -all_outcomes()) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  step_normalize(all_numeric(), -all_outcomes())\n\nCombine the recipe and model specification into a workflow.\n\npenguin_workflow &lt;- workflow() %&gt;%\n  add_model(multinom_spec) %&gt;%\n  add_recipe(penguin_recipe)"
  },
  {
    "objectID": "penguins_model.html#fit-the-model",
    "href": "penguins_model.html#fit-the-model",
    "title": "Classification Model",
    "section": "Fit the Model",
    "text": "Fit the Model\nWe’ll train the model on the training data.\n\npenguin_fit &lt;- fit(penguin_workflow, data = penguin_train)"
  },
  {
    "objectID": "penguins_model.html#model-evaluation",
    "href": "penguins_model.html#model-evaluation",
    "title": "Classification Model",
    "section": "Model Evaluation",
    "text": "Model Evaluation\nWe will evaluate the model’s performance on the test set.\n\npenguin_results &lt;- augment(penguin_fit, new_data = penguin_test)\nconf_matrix &lt;- penguin_results %&gt;%\n  conf_mat(truth = species, estimate = .pred_class)\n\nautoplot(conf_matrix, type = \"heatmap\") +\n  scale_fill_gradient(low = \"#FFC0CB\", high = \"#008080\") + \n  ggtitle(\"Confusion Matrix for Penguin Species Prediction\") +\n  theme_minimal() +\n  theme(text = element_text(size = 12),  # Adjust text size for better readability\n        plot.title = element_text(hjust = 0.5))  \n\nScale for fill is already present.\nAdding another scale for fill, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\nHere we calculate accuracy and other relevant metrics.\n\naccuracy &lt;- penguin_results %&gt;%\n  accuracy(truth = species, estimate = .pred_class)\naccuracy\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy multiclass     0.988\n\n\n\nsensitivity &lt;- penguin_results %&gt;%\n  sensitivity(truth = species, estimate = .pred_class, event_level = \"second\")\nsensitivity\n\n# A tibble: 1 × 3\n  .metric     .estimator .estimate\n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n1 sensitivity macro          0.991\n\n\n\nspecificity &lt;- penguin_results %&gt;%\n  specificity(truth = species, estimate = .pred_class, event_level = \"second\")\nspecificity\n\n# A tibble: 1 × 3\n  .metric     .estimator .estimate\n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n1 specificity macro          0.995"
  },
  {
    "objectID": "penguins_model.html#conclusion",
    "href": "penguins_model.html#conclusion",
    "title": "Classification Model",
    "section": "Conclusion",
    "text": "Conclusion\nBased on our metrics, our model performs very well on the test set. Other ways to explore this could be to utilize trees or other modeling methods; however with our model, we have a high accuracy, sensitivity, and specificity. Well done exploring and modeling this awesome penguin dataset!"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model",
    "section": "",
    "text": "Code\nimport warnings\nimport logging\n\nwarnings.filterwarnings(\"ignore\")\nlogging.getLogger().setLevel(logging.CRITICAL)\n\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn import preprocessing\n\n\nGet Data\n\n\nCode\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n\n\n\n\n\n\nDefine Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)\n\n\nGet some information\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n\n\nR^2 0.8555368759537614\nIntercept 2169.2697209393973\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n\n\n\n\nCode\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)\n\n\n\n\nCode\nimport pins\nfrom vetiver import vetiver_pin_write\nb = pins.board_folder('data/model', allow_pickle_read=True)\nvetiver_pin_write(b, v)\n\n\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240425T220814Z-19257\n\n\n\n\nCode\n#from joblib import dump, load\n\n# Assume `model` is your trained model\n#model_directory = 'C:/Users/C25Karis.Desotell/OneDrive - afacademy.af.edu/Documents/Spring 2024/Math 378/Actual Final Project'\n#model_filename = 'penguin_model.joblib'\n\n# Save the model\n#dump(model, f'{model_directory}/{model_filename}')\n\n\n\n\nCode\n# Load the model\n#model = load(f'{model_directory}/{model_filename}')\n\n\n\n\nCode\n# Generate a FastAPI app from the vetiver model\nfrom vetiver import VetiverAPI\n\napp = VetiverAPI(v, check_prototype=True)\n\n# Run the API server\n# Note: FastAPI's typical run command differs; assuming vetiver provides a simplified method:\n#app.run(port=8080)\n\n\nCan be accessed through “http://localhost:8080”\n\n\nCode\n#import vetiver\n#vetiver_prepare_docker(penguin_model, \"penguins\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Palmer Penguins - What About Them?",
    "section": "",
    "text": "This Website Walks through a Data Scientist’s Approach to Studying Penguins"
  },
  {
    "objectID": "eda-db.html",
    "href": "eda-db.html",
    "title": "Penguins EDA 2",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(dbplyr)\n\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836"
  },
  {
    "objectID": "eda-db.html#penguin-size-and-mass-by-sex-and-species",
    "href": "eda-db.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA 2",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(dbplyr)\n\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836"
  },
  {
    "objectID": "eda-db.html#penguin-size-vs-mass-by-species",
    "href": "eda-db.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA 2",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nDBI::dbDisconnect(con)\n\n\nR:\n\nCreate an active {renv} environment (CONSOLE)\n\nrenv::init()\n\nOption #1 “1: Activate the project and use the existing library.”\n\nrenv::activate()\nrenv::snapshot()\nrenv::deactivate()\n\n\nPython: \n\nCreate and activate a {venv} environment (TERMINAL)\n\npython -m venv venv\nsource venv/Scripts/activate\npython -m pip freeze &gt; requirements.txt\ndeactivate"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About the Author:\n\n\n\n\n\nKaris Desotell is an aspiring data scientist who created this site, overcoming much difficulty and many challenging obstacles. She loves penguins and the ocean, and if coding can inspire a love of penguins in others, she is more than happy to pour blood, sweat, and tears into her work to increase that love."
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%  \n  group_by(species, sex) %&gt;%  \n    summarise(across(where(is.numeric),       \n                \\(x) mean(x, na.rm = TRUE))) %&gt;%  \n    knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400\n\n\n\n\n\n\n\nCode\ndf %&gt;%  \n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +  \n  geom_point() +\n  geom_smooth(method = \"lm\")"
  },
  {
    "objectID": "model-db.html",
    "href": "model-db.html",
    "title": "Model 2",
    "section": "",
    "text": "Code\n#import duckdb\n#from pandas import get_dummies\n#import numpy as np\n#from sklearn.linear_model import LinearRegression\n#from sklearn import preprocessing"
  },
  {
    "objectID": "model-db.html#get-data",
    "href": "model-db.html#get-data",
    "title": "Model 2",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\n#con = duckdb.connect('my-db.duckdb')\n#df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\n#con.close()\n\n#df.head(3)"
  },
  {
    "objectID": "model-db.html#define-model-and-fit",
    "href": "model-db.html#define-model-and-fit",
    "title": "Model 2",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\n#X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\n#y = df['body_mass_g']\n\n#model = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "model-db.html#get-some-information",
    "href": "model-db.html#get-some-information",
    "title": "Model 2",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\n#print(f\"R^2 {model.score(X,y)}\")\n#print(f\"Intercept {model.intercept_}\")\n#print(f\"Columns {X.columns}\")\n#print(f\"Coefficients {model.coef_}\")"
  },
  {
    "objectID": "penguins_eda.html",
    "href": "penguins_eda.html",
    "title": "Penguins Exploratory Data Analysis",
    "section": "",
    "text": "Conduct exploratory analysis both numerically and graphically.\nUnderstand the distribution and relationship among the dataset features."
  },
  {
    "objectID": "penguins_eda.html#goals-of-our-eda",
    "href": "penguins_eda.html#goals-of-our-eda",
    "title": "Penguins Exploratory Data Analysis",
    "section": "",
    "text": "Conduct exploratory analysis both numerically and graphically.\nUnderstand the distribution and relationship among the dataset features."
  },
  {
    "objectID": "penguins_eda.html#load-the-data",
    "href": "penguins_eda.html#load-the-data",
    "title": "Penguins Exploratory Data Analysis",
    "section": "Load the Data",
    "text": "Load the Data\nFirst, we load the data from the palmerpenguins dataset.\n\ndata(\"penguins\", package = \"palmerpenguins\")"
  },
  {
    "objectID": "penguins_eda.html#explore-the-data",
    "href": "penguins_eda.html#explore-the-data",
    "title": "Penguins Exploratory Data Analysis",
    "section": "Explore the Data",
    "text": "Explore the Data\nNext we want to produce a numerical summary of the variables in the dataset. We grouped the summary by species and sex because those are the attributes we are most interested in.\n\npenguins %&gt;%  \n  group_by(species, sex) %&gt;%  \n  summarise(across(where(is.numeric), \\(x) mean(x, na.rm = TRUE))) %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400\n\n\n\n\n\n\n\n\nNow we’ll look at a scatterplot to help us visualize the relationships between species and size.\n\npenguins %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +  # Add points\n  geom_smooth(method = \"lm\") +  # Add linear regression lines\n  labs(\n    title = \"Relationship between Bill Length and Body Mass\",\n    x = \"Bill Length (mm)\",\n    y = \"Body Mass (g)\",\n    color = \"Species\"  # Optional: label for the color legend\n  )\n\n\n\n\n\n\n\n\n\n\n\nLet’s also look at a boxplot to help us visualize the distribution in the dataset:\n\n\n\n\n\n\n\n\n\n\n\n\nLast, let’s look at a histogram of flipper length among the different species.\n\nggplot(penguins, aes(x = flipper_length_mm, fill = species)) +\n  geom_histogram(bins = 15, alpha = 0.6, position = \"identity\") +  # Adjust transparency with alpha and overlay histograms\n  scale_fill_manual(values = c(\"Adelie\" = \"#FF69B4\",    # Hot Pink\n                               \"Chinstrap\" = \"#800080\", # Purple\n                               \"Gentoo\" = \"#008080\")) + # Teal\n  labs(title = \"Histogram of Flipper Length by Species\",\n       x = \"Flipper Length (mm)\",\n       y = \"Frequency\",\n       fill = \"Species\") +\n  theme_minimal() +\n  theme(legend.position = \"top\")"
  }
]