[
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model",
    "section": "",
    "text": "Code\nimport warnings\nimport logging\n\nwarnings.filterwarnings(\"ignore\")\nlogging.getLogger().setLevel(logging.CRITICAL)\n\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn import preprocessing\n\n\nGet Data\n\n\nCode\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n\n\n\n\n\n\nDefine Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)\n\n\nGet some information\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n\n\nR^2 0.8555368759537614\nIntercept 2169.2697209393973\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n\n\n\n\nCode\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)\n\n\n\n\nCode\nimport pins\nfrom vetiver import vetiver_pin_write\nb = pins.board_folder('data/model', allow_pickle_read=True)\nvetiver_pin_write(b, v)\n\n\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240425T195931Z-19257\n\n\n\n\nCode\n#from joblib import dump, load\n\n# Assume `model` is your trained model\n#model_directory = 'C:/Users/C25Karis.Desotell/OneDrive - afacademy.af.edu/Documents/Spring 2024/Math 378/Actual Final Project'\n#model_filename = 'penguin_model.joblib'\n\n# Save the model\n#dump(model, f'{model_directory}/{model_filename}')\n\n\n\n\nCode\n# Load the model\n#model = load(f'{model_directory}/{model_filename}')\n\n\n\n\nCode\n# Generate a FastAPI app from the vetiver model\nfrom vetiver import VetiverAPI\n\napp = VetiverAPI(v, check_prototype=True)\n\n# Run the API server\n# Note: FastAPI's typical run command differs; assuming vetiver provides a simplified method:\n#app.run(port=8080)\n\n\nCan be accessed through “http://localhost:8080”\n\n\nCode\n#import vetiver\n#vetiver_prepare_docker(penguin_model, \"penguins\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Palmer Penguins - What About Them?",
    "section": "",
    "text": "This Website Walks through a Data Scientist’s Approach to Studying Penguins"
  },
  {
    "objectID": "eda-db.html",
    "href": "eda-db.html",
    "title": "Penguins EDA 2",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(dbplyr)\n\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836"
  },
  {
    "objectID": "eda-db.html#penguin-size-and-mass-by-sex-and-species",
    "href": "eda-db.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA 2",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(dbplyr)\n\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836"
  },
  {
    "objectID": "eda-db.html#penguin-size-vs-mass-by-species",
    "href": "eda-db.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA 2",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nDBI::dbDisconnect(con)\n\n\nR:\n\nCreate an active {renv} environment (CONSOLE)\n\nrenv::init()\n\nOption #1 “1: Activate the project and use the existing library.”\n\nrenv::activate()\nrenv::snapshot()\nrenv::deactivate()\n\n\nPython: \n\nCreate and activate a {venv} environment (TERMINAL)\n\npython -m venv venv\nsource venv/Scripts/activate\npython -m pip freeze &gt; requirements.txt\ndeactivate"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About the Author:\n\n\n\n\n\nKaris Desotell is an aspiring data scientist who created this site, overcoming much difficulty and challenging obstacles. She loves penguins and the ocean, and if coding can inspire a love of penguins in others, she is more than happy to pour blood, sweat, and tears into her work to increase that love."
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%  \n  group_by(species, sex) %&gt;%  \n    summarise(across(where(is.numeric),       \n                \\(x) mean(x, na.rm = TRUE))) %&gt;%  \n    knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400\n\n\n\n\n\n\n\nCode\ndf %&gt;%  \n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +  \n  geom_point() +\n  geom_smooth(method = \"lm\")"
  },
  {
    "objectID": "model-db.html",
    "href": "model-db.html",
    "title": "Model 2",
    "section": "",
    "text": "Code\n#import duckdb\n#from pandas import get_dummies\n#import numpy as np\n#from sklearn.linear_model import LinearRegression\n#from sklearn import preprocessing"
  },
  {
    "objectID": "model-db.html#get-data",
    "href": "model-db.html#get-data",
    "title": "Model 2",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\n#con = duckdb.connect('my-db.duckdb')\n#df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\n#con.close()\n\n#df.head(3)"
  },
  {
    "objectID": "model-db.html#define-model-and-fit",
    "href": "model-db.html#define-model-and-fit",
    "title": "Model 2",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\n#X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\n#y = df['body_mass_g']\n\n#model = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "model-db.html#get-some-information",
    "href": "model-db.html#get-some-information",
    "title": "Model 2",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\n#print(f\"R^2 {model.score(X,y)}\")\n#print(f\"Intercept {model.intercept_}\")\n#print(f\"Columns {X.columns}\")\n#print(f\"Coefficients {model.coef_}\")"
  }
]